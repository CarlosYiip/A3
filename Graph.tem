/************************************************* Graph **************************************************/

template <typename N, typename E>
bool Graph<N, E>::node_existed(const N &val) const {
    auto it = std::find_if(nodes_sp.cbegin(), nodes_sp.cend(), [&val] (const std::shared_ptr<Node>& sp) {
        return sp->get_data() == val;
    });

    return it != nodes_sp.cend();
};

template <typename N, typename E>
bool Graph<N, E>::edge_existed(const N& src, const N& dst, const E& w) const {
    auto it = std::find_if(edges.cbegin(), edges.cend(), [&src, &dst, &w] (const Edge& edge) {
        bool b1 = src == edge.get_src_data();
        bool b2 = dst == edge.get_dst_data();
        bool b3 = w == edge.get_weight();
        return b1 && b2 && b3;
    });

    return it != edges.cend();
};

template <typename N, typename E>
bool Graph<N, E>::addNode(const N &val) {

    if (node_existed(val))
        return false;

    std::shared_ptr<Node> new_node_sp = std::make_shared<Node>(val);
    nodes_sp.push_back(new_node_sp);
    
    return true;
}

template <typename N, typename E>
bool Graph<N, E>::addEdge(const N& src, const N& dst, const E& w) {
    if (edge_existed(src, dst, w))
        return true;

    auto src_it = std::find_if(nodes_sp.cbegin(), nodes_sp.cend(), [&src] (const std::shared_ptr<Node>& sp) {
        return sp->get_data() == src;
    });

    auto dst_it = std::find_if(nodes_sp.cbegin(), nodes_sp.cend(), [&dst] (const std::shared_ptr<Node>& sp) {
        return sp->get_data() == dst;
    });

    if (src_it == nodes_sp.cend() || dst_it == nodes_sp.cend())
        throw std::runtime_error("either src or dst not in graph");

    Edge new_edge {*src_it, *dst_it, w};

    return true;
};


/************************************************* Node **************************************************/

template <typename N, typename E>
Graph<N, E>::Node::Node(const N& val) : data_ptr{std::make_unique<N>(val)} {};

template <typename N, typename E>
const N& Graph<N, E>::Node::get_data() const {
    return *data_ptr;
};



/************************************************* Edge **************************************************/



template <typename N, typename E>
Graph<N, E>::Edge::Edge(const std::shared_ptr<Node>& src, const std::shared_ptr<Node>& dst, const E& w) : src_ptr{src}, dst_ptr{dst}, weight{w} {};

template <typename N, typename E>
const N& Graph<N, E>::Edge::get_src_data() const { return src_ptr.lock()->get_data(); };

template <typename N, typename E>
const N& Graph<N, E>::Edge::get_dst_data() const { return dst_ptr.lock()->get_data(); };

template <typename N, typename E>
const E& Graph<N, E>::Edge::get_weight() const {return weight; };


















